#!/usr/bin/python
""" Simple utility for interacting with kernel cgroup/blkio facilities.
    Includes some iostat like functionality.
"""
import os
import time
import optparse


def getlimits(limittype):
    """Get current blkio limits for devices """
    devices = []
    if limittype is "w":
        blkiofile = open("/cgroup/blkio/blkio.throttle.write_iops_device")
    elif limittype is "r":
        blkiofile = open("/cgroup/blkio/blkio.throttle.read_iops_device")

    while 1:
        device = {}
        entry = blkiofile.readline()
        if not entry:
            break
        major = entry.split()[0].split(":")[0]
        minor = entry.split()[0].split(":")[1]
        limit = entry.split()[1]
        device['major'] = major
        device['minor'] = minor
        device['limit'] = limit
        devices.append(device)

        for line in open('/proc/partitions').readlines()[2:]:
            major, minor, blocks, kernel_device = line.strip().split()
            device = [d for d in devices
                if d['major'] == major and d['minor'] == minor]
            if device:
                device[0]['kernel_device'] = kernel_device
    return devices


def get_all_io_serviced():
    """Total io serviced."""
    #see http://bit.ly/mrizVx
    devstats = []
    device = {}
    for line in open('/cgroup/blkio/blkio.throttle.io_serviced'):
        if len(line.strip().split()) is 3:
            devid, iotype, value = line.strip().split()
            major, minor = devid.split(":")
            device = {}
            device['major'] = major
            device['minor'] = minor
            device[iotype] = value
            devstats.append(device)
    return devstats


def get_io_serviced(tgtmajor, tgtminor):
    """Get completed iops stats"""
    devstats = []
    device = {'major': tgtmajor, 'minor': tgtminor}
    devstats.append(device)
    for line in open('/cgroup/blkio/blkio.throttle.io_serviced'):
        if len(line.strip().split()) is 3:
            devid, iotype, value = line.strip().split()
            major, minor = devid.split(":")
            if tgtmajor == major and tgtminor == minor:
                devstats[0][iotype] = value
    return devstats


def get_io_service_bytes(tgtmajor, tgtminor):
    """Get IO bytes transferred"""
    devstats = []
    device = {'major': tgtmajor, 'minor': tgtminor}
    devstats.append(device)
    for line in open('/cgroup/blkio/blkio.throttle.io_service_bytes'):
        if len(line.strip().split()) is 3:
            devid, iotype, value = line.strip().split()
            major, minor = devid.split(":")
            if tgtmajor == major and tgtminor == minor:
                devstats[0][iotype] = value
    return devstats


def get_io_wait_time(tgtmajor, tgtminor):
    """Get io wait times (in nanoseconds)"""
    devstats = []
    device = {'major': tgtmajor, 'minor': tgtminor}
    devstats.append(device)
    for line in open('/cgroup/blkio/blkio.io_wait_time'):
        if len(line.strip().split()) is 3:
            devid, iotype, value = line.strip().split()
            major, minor = devid.split(":")
            if tgtmajor == major and tgtminor == minor:
                devstats[0][iotype] = value
    return devstats


def get_io_queued(tgtmajor, tgtminor):
    """Get IO Queued right now"""
    devstats = []
    device = {'major': tgtmajor, 'minor': tgtminor}
    devstats.append(device)
    for line in open('/cgroup/blkio/blkio.io_queued'):
        if len(line.strip().split()) is 3:
            devid, iotype, value = line.strip().split()
            major, minor = devid.split(":")
            if tgtmajor == major and tgtminor == minor:
                devstats[0][iotype] = value
    return devstats


def pstats(stats):
    """Format and print stats."""
    stypes = ['Read', 'Write', 'Sync', 'Async', 'Total']
    for stype in stypes:
        print stype.ljust(10),
    print ""
    values = []
    for stype in stypes:
        try:
            values.append(stats[0][stype])
            #print "\t%s: %s" % (stype, stats[0][stype])
        except KeyError as empty:
            values.append("-")
            #print "\t%s: -" % stype
    for value in values:
        print value.ljust(10),
    print "\n"


def showstats(device):
    """Single stats run"""
    major = str(os.major(os.lstat(device).st_rdev))
    minor = str(os.minor(os.lstat(device).st_rdev))
    print "IOPS completed:"
    stats = get_io_serviced(major, minor)
    pstats(stats)
    print "Bytes transferred:"
    stats = get_io_service_bytes(major, minor)
    pstats(stats)
    print "IO wait times (nanoseconds):"
    stats = get_io_wait_time(major, minor)
    pstats(stats)
    print "IO Queued (right the hell now):"
    stats = get_io_queued(major, minor)
    pstats(stats)


def streamstats(device, seconds):
    """Stream stats to screen"""
    while True:
        print "\n========== %s" % time.ctime()
        showstats(device)
        time.sleep(seconds)
        #os.system("clear")
        #print '%s\r\n' % ' '*20


def showlimits():
    """Show current blkio write/read limits"""
    print "blkio write limits:"
    devices = getlimits("w")
    if devices:
        for device in devices:
            print "\t%s [%s:%s]: %s/sec" % (device['kernel_device'],
            device['major'], device['minor'], device['limit'])
        print ""
    else:
        print "\tNo limits set"
    print "blkio read limits:"
    devices = getlimits("r")
    if devices:
        for device in devices:
            print "\t%s [%s:%s]: %s/sec" % (device['kernel_device'],
            device['major'], device['minor'], device['limit'])
        print ""
    else:
        print "\tNo limits set"


def main():
    usage = "usage: %prog [-l] [-s] [--refresh seconds] -d [device]"
    args = optparse.OptionParser(usage)
    args.add_option('--limits', '-l', action="store_true",
        help="show blkio limits")
    args.add_option('--stats', '-s', action="store_true",
        help="print blkio stats for device")
    args.add_option('--device', '-d', default="/dev/sda",
        help="Default = /dev/sda")
    args.add_option('--refresh', type="int",
        help="Refresh stats every X seconds")
    options, arguments = args.parse_args()

    if options.limits is True:
        showlimits()
    elif options.stats is True:
        if options.refresh is None:
            showstats(options.device)
        else:
            streamstats(options.device, options.refresh)
    else:
        args.print_help()

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print '\n'

